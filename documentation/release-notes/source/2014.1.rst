*******************************
Open Dylan 2014.1 Release Notes
*******************************

Introduction
============

This document describes the 2014.1 release of Open Dylan, released
XXX XX, 2014.

* `Download the release <http://opendylan.org/download/index.html>`_
* `Report bugs <https://github.com/dylan-lang/opendylan/issues>`_
* `Source code <https://github.com/dylan-lang/opendylan/tree/v2014.1>`_

DFMC
====

The intermediate language of the compiler, named Dylan Flow Machine,
has been instrumented with tracing facilities. Changes to the control
and data flow, as well as optimization information, can be sent to
an external TCP socket via a property in the interactive
``dylan-compiler``: ``set visualization <host>:<port>``.

Compiling the ``dylan`` library with tracing enables emits roughly
250MB data. Therefore, a filter property can be set ``set
visualization-filter <method-name>`` if interested only in
optimization of a single method.

The ``visualization-type`` property can be set to either ``json`` or
``sexp``.

The protocol itself is currently undocumented, but each message
consists of a property list containing a ``type`` key, and various
other information. A screencast showing an earlier implementation of
this optimization visualization `can be seen here
<https://opendylan.org/~hannes/test4.avi>`__.

C Run-time
==========

``debug-message`` no longer crashes when printing some conditions.


Common Dylan
============

The ``<timer>`` class has been renamed to ``<profiling-timer>``.

The function ``integer-to-string`` is now faster.


dylan-direct-c-ffi
==================

Much like ``%call-c-function`` for low-level C-FFI, there is now
a ``%objc-msgsend`` for low-level Objective C messaging integration.
More information about this will be forthcoming in an ``objc-dylan``
bridge library.

``%objc-msgsend`` takes the target and selector as ``<raw-machine-word>``
values. As with ``%call-c-function``, all values passed in and returned
should be raw values.

If you need the ``objc_msgSend_stret`` or other variants, pass
``c-modifiers: "_stret"`` or similar after the selector. The value
passed here will be appended to ``objc_msgSend`` so it works for all
variants, including sending to the super (``objc_msgSendSuper``, etc).

.. code-block:: dylan

    %objc-msgsend (target, selector)
       (argument :: <raw-type>)
     => ()
      (argument-as-raw)
    end;


hash-algorithms
===============

A crash resulting from memory corruption when using sha-1 has been
fixed.

The library now builds on Windows.


make-dylan-app
==============

``make-dylan-app`` is now included in the Windows distribution.


strings
=======

String comparison and equality operations are now 10 times faster
when they are known to be on byte-strings.


system
======

The function ``format-date`` is now faster.


Testworks
=========

Compiler warnings are now produced when a test or suite is unused.
For example, it is easy to forget to add a test to any suite.  As a
side effect of this change, it is now necessary to organize test suite
code in a bottom-up style.  That is, you must define tests and suites
*before* including them in a suite definition in your source file.  If
you don't, you will receive a warning about an "Illegal forward
reference".
