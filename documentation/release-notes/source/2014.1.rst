*******************************
Open Dylan 2014.1 Release Notes
*******************************

Introduction
============

This document describes the 2014.1 release of Open Dylan, released
XXX XX, 2014.

* `Download the release <http://opendylan.org/download/index.html>`_
* `Report bugs <https://github.com/dylan-lang/opendylan/issues>`_
* `Source code <https://github.com/dylan-lang/opendylan/tree/v2014.1>`_

Build System
============

* The Jam files for Linux, FreeBSD and OS X have been updated to support
  doing a build when there are spaces in the path to the current working
  directory. This was previously only handled correctly for Windows.


Compiler
========

* The intermediate language of the compiler, named Dylan Flow Machine,
  has been instrumented with tracing facilities. Changes to the control
  and data flow, as well as optimization information, can be received by
  setting the ``*trace-dfm-callback*`` (exported from the
  dfmc-flow-graph) variable to a unary function. The variable
  ``*trace-dfm-output*`` should also be set (``structured-output``,
  exported from the dfmc-debug-back-end library might be useful).

  The argument to the ``*trace-dfm-callback`` itself is a property list
  containing at least a ``type`` key, a source location (``method``,
  ``file``, ``library`` keys), likely a ``nodeid`` key, and various
  other information.

  Compiling the ``dylan`` library with tracing emits lots of
  data (250MB). Therefore, a filtering can be established on a file
  name, method name, and/or library name. The variables
  ``*trace-dfm-library*``, ``*trace-dfm-file*``, and
  ``*trace-dfm-method*`` are of type ``false-or(<symbol>)`` and are exported
  from the dfmc-flow-graph library.

  An example user of this interface is on `GitHub
  <https://github.com/hannesm/visualization-middleware>`_.  A
  screencast showing an earlier implementation of this optimization
  visualization `can be seen here
  <https://opendylan.org/~hannes/test4.avi>`_.

C-FFI
=====

* There is a new ``objc-selector-definer`` compiler macro. This supports
  the Objective C / Dylan bridge by allowing the definition of Objective
  C selectors and functions for sending them, complete with type
  information.

  An example usage from the Objective C / Dylan bridge library is:

  .. code-block:: dylan

     define objc-selector sel/alloc
       parameter target :: <objc/class>;
       result objc-instance :: <objc/instance-address>;
       selector: "alloc";
     end;

  This must be used in conjunction with the Objective C / Dylan
  bridge library.

C Run-time
==========

* ``debug-message`` no longer crashes when printing some conditions.


Common Dylan
============

* The ``<timer>`` class has been renamed to ``<profiling-timer>``.

* The function ``integer-to-string`` is now faster.


Dylan
=====

Open Dylan now implements
`DEP-0007 (Type-Safe Limited Collections) <http://opendylan.org/proposals/dep-0007.html>`_.
This adds a ``default-fill:`` argument to ``limited``, a corresponding
``element-type-fill`` generic function, and an ``element-type`` generic
function applicable to all collections. With this, limited collections will now
be easier and safer to useâ€”with one caveat:

As described in the DEP-0007 document, Open Dylan had previously ensured that
some numeric limited collection types would automatically be filled with ``0``
when instantiated *with* a non-zero size but *without* a ``fill:`` init-keyword.
This is no longer the case. Code that relied on this behavior must be updated
to provide valid ``fill:`` or ``default-fill:`` values.

``element`` will no longer signal a type error when it returns its ``default:``
value and that value does not match the element type of a limited collection.


dylan-direct-c-ffi
==================

* Much like ``%call-c-function`` for low-level C-FFI, there is now
  a ``%objc-msgsend`` for low-level Objective C messaging integration.
  More information about this will be forthcoming in an ``objc-dylan``
  bridge library.

  ``%objc-msgsend`` takes the target and selector as ``<raw-machine-word>``
  values. As with ``%call-c-function``, all values passed in and returned
  should be raw values.

  If you need the ``objc_msgSend_stret`` or other variants, pass
  ``c-modifiers: "_stret"`` or similar after the selector. The value
  passed here will be appended to ``objc_msgSend`` so it works for all
  variants, including sending to the super (``objc_msgSendSuper``, etc).

  .. code-block:: dylan

      %objc-msgsend (target, selector)
         (argument :: <raw-type>)
       => ()
        (argument-as-raw)
      end;


hash-algorithms
===============

* A crash resulting from memory corruption when using sha-1 has been
  fixed.

* The library now builds on Windows.


make-dylan-app
==============

* ``make-dylan-app`` is now included in the Windows distribution.


strings
=======

* String comparison and equality operations are now 10 times faster
  when they are known to be on byte-strings.


system
======

* The function ``format-date`` is now faster.
* The ``copy-file`` method on Unix no longer fails when the path contains
  spaces.


Testworks
=========

* Compiler warnings are now produced when a test or suite is unused.
  For example, it is easy to forget to add a test to any suite.  As a
  side effect of this change, it is now necessary to organize test
  suite code in a bottom-up style.  That is, you must define tests and
  suites *before* including them in a suite definition in your source
  file.  If you don't, you will receive a warning about an "Illegal
  forward reference".

* Benchmarks are once again supported.  See the `documentation
  <http://opendylan.org/documentation/testworks/usage.html>`_ for
  details.
