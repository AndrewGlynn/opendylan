*******************************
Open Dylan 2015.1 Release Notes
*******************************

Introduction
============

This document describes the 2015.1 release of Open Dylan, released
XXX XX, 2015.

* `Download the release <http://opendylan.org/download/index.html>`_
* `Report bugs <https://github.com/dylan-lang/opendylan/issues>`_
* `Source code <https://github.com/dylan-lang/opendylan/tree/v2015.1>`_

Build System
============

* The arguments to configure for specifying which garbage collector to
  use have changed (again). The arguments are now::

    --with-mps=DIR
    --with-gc=DIR
    --with-harp-collector=mps|boehm|malloc
    --with-c-collector=boehm|malloc
    --with-llvm-collector=boehm|malloc

  The ``with-mps`` option (for pointing to the Memory Pool System
  source directory) is only needed when using the MPS collector with
  the HARP back-end on either 32-bit x86 FreeBSD or 32-bit x86 Linux.
  The system should be able to find the Boehm-Demers-Weiser collector
  automatically if it is in the standard system install directory; the
  ``with-gc`` option should only be needed if it is installed in a
  non-standard location.

  The default collectors are MPS for the HARP back-end's run-time
  library, and the Boehm-Demers-Weiser collector for the C and LLVM
  back-ends. These shouldn't be changed unless you're sure you know
  what you're doing.

C-FFI
=====

* Nested C structs by value are now supported by the C backend. Previously,
  using this construct would result in a compilation error in the generated
  C code.

Compiler
========

* The compiler emits warnings for issues with ``define sealed domain``:

  * Incorrect number of type specializers provided. The number of type
    specializers must match the number of required parameters for the
    generic function.
  * Type specializers are not subtypes of the corresponding required
    argument of the generic function.

    For example, this is useful for catching an incorrect sealing of
    ``make``:

    .. code-block:: dylan

       define sealed domain make (<my-class>); // Wrong
       define sealed domain make (singleton(<my-class>)); // Correct

  * Previously, ``define domain`` was accepted without warning. This is
    not valid Dylan syntax as it should be ``define sealed domain``.

Documentation
=============

* The documentation generator included within the compiler has been
  updated to produce better and more accurate documentation that will
  require less manual editing. To use it, after compiling your library,
  use this command::

    export -format rst -file my-lib.rst interface-reference

system
======

* New specializations on :drm:`as` have been added for creating locators
  from strings for the ``<file-system-directory-locator>`` and
  ``<file-system-file-locator>`` classes. These aren't typically used but
  their omission led to possible confusion for users.
