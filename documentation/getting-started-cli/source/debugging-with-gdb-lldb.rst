Debugging with GDB or LLDB
**************************

Which compiler backend are you using?
=====================================

If you are using the C backend, then the information discussed here
will be useful for debugging. We use the C backend on 64 bit Linux,
64 bit FreeBSD and all Mac OS X versions.

If you're using the HARP backend (32 bit Linux or 32 bit FreeBSD), then
you'll be limited to getting stack traces.


Debugging with the C backend
============================

Debugging with the C backend is not a perfect experience but it is
improving.

Finding the generated C files
-----------------------------

The C files generated by the compiler will be found under the
``_build/build`` directory with a directory in there for each
library that was built as part of the project.

Finding the corresponding Dylan code
------------------------------------

The generated C files contain the file name and line number of the
corresponding Dylan source. However, this may be confusing in the
presence of inlined functions and macro expansions.

Understanding name mangling
---------------------------

*Fill this in, particularly with a link to the Hacker's Guide!*

Breaking on main
----------------

Unfortunately, you can't simply set a breakpoint on ``main``. This is because
the generated code runs from shared library constructor functions so the
entire Dylan application runs and exits prior to ``main`` being invoked.

A reasonable alternative is to determine the C name of your entry point
function and set a breakpoint on that instead.

Displaying Data
---------------

The C runtime contains a number of helper functions specifically for
improving the debugging process. These can be invoked from gdb or lldb
and will assist you in analyzing values.

*Fill this in!*

Debugging with the HARP backend
===============================

As mentioned previously, this is largely limited to getting stack
traces.  If you try to run a Dylan application built with the
HARP backend under the debugger, you may need to adjust your
debugger's signal handling.

*Add more notes about this later.*
